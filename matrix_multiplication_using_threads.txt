#include <iostream>
#include <vector>
#include <thread>
#include <random>

using namespace std;

// Function to perform matrix multiplication for a specific range of rows
void matrixMultiplyRange(const vector<vector<int>>& A, const vector<vector<int>>& B, vector<vector<int>>& result, int startRow, int endRow) {
    int rowsA = A.size();
    int colsA = A[0].size();
    int colsB = B[0].size();

    for (int i = startRow; i < endRow; ++i) {
        for (int j = 0; j < colsB; ++j) {
            result[i][j] = 0;
            for (int k = 0; k < colsA; ++k) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main() {
    int rowsA, colsA, rowsB, colsB;

    // Input matrix dimensions from the user
    cout << "Enter the number of rows for matrix A: ";
    cin >> rowsA;
    cout << "Enter the number of columns for matrix A: ";
    cin >> colsA;
    cout << "Enter the number of rows for matrix B: ";
    cin >> rowsB;
    cout << "Enter the number of columns for matrix B: ";
    cin >> colsB;

    // Check if the matrices can be multiplied
    if (colsA != rowsB) {
        cout << "Error: Matrix dimensions are invalid for multiplication." << endl;
        return 1;
    }

    // Create random matrices A and B
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(1, 10); // You can adjust the range of random values as needed

    vector<vector<int>> A(rowsA, vector<int>(colsA));
    vector<vector<int>> B(rowsB, vector<int>(colsB));

    cout << "Matrix A:" << endl;
    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsA; ++j) {
            A[i][j] = dis(gen);
            cout << A[i][j] << " ";
        }
        cout << endl;
    }

    cout << "Matrix B:" << endl;
    for (int i = 0; i < rowsB; ++i) {
        for (int j = 0; j < colsB; ++j) {
            B[i][j] = dis(gen);
            cout << B[i][j] << " ";
        }
        cout << endl;
    }

    // Create the result matrix
    vector<vector<int>> result(rowsA, vector<int>(colsB));

    // Perform matrix multiplication using multiple threads
    int numThreads = thread::hardware_concurrency();
    int rowsPerThread = rowsA / numThreads;

    vector<thread> threads;
    for (int i = 0; i < numThreads; ++i) {
        int startRow = i * rowsPerThread;
        int endRow = (i == numThreads - 1) ? rowsA : startRow + rowsPerThread;
        threads.emplace_back(matrixMultiplyRange, cref(A), cref(B), ref(result), startRow, endRow);
    }

    for (auto& th : threads) {
        th.join();
    }

    // Print the resulting matrix
    cout << "Resulting Matrix:" << endl;
    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsB; ++j) {
            cout << result[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}